{"version":3,"sources":["styles.js","App.jsx","index.js"],"names":["useStyles","makeStyles","theme","container","backgroundColor","palette","background","paper","padding","spacing","listStyleType","cardGrid","card","height","display","justifyContent","alignItems","flexDirection","cardContent","flexGrow","App","useState","sec","setSec","status","setStatus","isOn","setIsOn","classes","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","start","useCallback","stop","reset","wait","console","log","Date","Container","className","maxWidth","Grid","justify","item","xs","sm","md","lg","Card","CardContent","Typography","variant","toISOString","slice","CardActions","ButtonGroup","align","color","Button","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAuBeA,EArBGC,aAAW,SAACC,GAAD,MAAY,CACrCC,UAAW,CACPC,gBAAiBF,EAAMG,QAAQC,WAAWC,MAC1CC,QAASN,EAAMO,QAAQ,EAAG,EAAG,GAC7BC,cAAe,QAEnBC,SAAU,CACNH,QAAS,UAEbI,KAAM,CACFC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,UAEnBC,YAAa,CACTC,SAAU,O,OCZH,SAASC,IAAO,IAAD,EACNC,mBAAS,GADH,mBACrBC,EADqB,KAChBC,EADgB,OAEAF,mBAAS,QAFT,mBAErBG,EAFqB,KAEbC,EAFa,OAGJJ,oBAAS,GAHL,mBAGrBK,EAHqB,KAGfC,EAHe,KAItBC,EAAU5B,IAEhB6B,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAQzB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,QAAXX,GACFD,GAAO,SAAAa,GAAG,OAAIA,EAAM,UAGnB,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAACd,IAEJ,IAAMe,EAAQC,uBAAY,WACxBf,EAAU,OACVE,GAAQ,KACP,IAEGc,EAAOD,uBAAY,WACvBf,EAAU,QACVF,EAAO,GACPI,GAAQ,KACP,IAEGe,EAAQF,uBAAY,WACxBjB,EAAO,KACN,IAEGoB,EAAOH,uBAAY,WACvBf,EAAU,QACVE,GAAQ,KACP,IAGH,OADAiB,QAAQC,IAAI,IAAIC,KAAKxB,IAEnB,cAACyB,EAAA,EAAD,CAAWC,UAAWpB,EAAQjB,SAAUsC,SAAS,KAAjD,SACE,cAACC,EAAA,EAAD,CAAM/C,WAAS,EAACgD,QAAQ,SAAxB,SACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAtC,SACE,eAACC,EAAA,EAAD,CAAMT,UAAWpB,EAAQhB,KAAzB,UACE,cAAC8C,EAAA,EAAD,CAAaV,UAAWpB,EAAQV,YAAhC,SACE,cAACyC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0B,IAAId,KAAKxB,GAAKuC,cAAcC,MAAM,GAAI,QAElE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAaC,MAAM,SAASL,QAAQ,YAAYM,MAAM,UAAtD,UACIxC,EAEC,cAACyC,EAAA,EAAD,CAAQC,QAAS3B,EAAjB,kBADA,cAAC0B,EAAA,EAAD,CAAQC,QAAS7B,EAAjB,mBAEH,cAAC4B,EAAA,EAAD,CAAQC,QAAS1B,EAAjB,mBACA,cAACyB,EAAA,EAAD,CAAQC,QAASzB,EAAjB,gCC3DhB0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnD,EAAD,MAEFoD,SAASC,eAAe,W","file":"static/js/main.690787cf.chunk.js","sourcesContent":["import {makeStyles} from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n        listStyleType: 'none',\r\n    },\r\n    cardGrid: {\r\n        padding: '20px 0'\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column'\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    },\r\n}))\r\n\r\nexport default useStyles;","import { interval } from 'rxjs';\r\nimport React, { useEffect, useState, useCallback } from 'react'\r\nimport {  Subject } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { Button, ButtonGroup, Card, CardActions, CardContent, Container, Grid, Typography } from '@material-ui/core';\r\nimport useStyles from './styles'\r\n\r\nexport default function App() {\r\n  const [sec, setSec] = useState(0);\r\n  const [status, setStatus] = useState(\"stop\");\r\n  const [isOn, setIsOn] = useState(false)\r\n  const classes = useStyles()\r\n \r\n  useEffect(() => {\r\n    const unsubscribe$ = new Subject();\r\n    interval(1000)\r\n      .pipe(takeUntil(unsubscribe$))\r\n      .subscribe(() => {\r\n        if (status === \"run\") {\r\n          setSec(val => val + 1000);\r\n        }\r\n      });\r\n    return () => {\r\n      unsubscribe$.next();\r\n      unsubscribe$.complete();\r\n    };\r\n  }, [status]);\r\n \r\n  const start = useCallback(() => {\r\n    setStatus(\"run\");\r\n    setIsOn(true)\r\n  }, []);\r\n \r\n  const stop = useCallback(() => {\r\n    setStatus(\"stop\");\r\n    setSec(0);\r\n    setIsOn(false)\r\n  }, []);\r\n \r\n  const reset = useCallback(() => {\r\n    setSec(0);\r\n  }, []);\r\n \r\n  const wait = useCallback(() => {\r\n    setStatus(\"wait\");\r\n    setIsOn(false)\r\n  }, []);\r\n \r\n  console.log(new Date(sec));\r\n  return (\r\n    <Container className={classes.cardGrid} maxWidth='lg'>\r\n      <Grid container justify='center'>\r\n        <Grid item xs={12} sm={12} md={8} lg={6}>\r\n          <Card className={classes.card}>\r\n            <CardContent className={classes.cardContent}>\r\n              <Typography variant='h1'>{new Date(sec).toISOString().slice(11, 19)}</Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n              <ButtonGroup align='center' variant='contained' color='primary'>\r\n                {!isOn\r\n                  ?<Button onClick={start}>Start</Button>\r\n                  :<Button onClick={stop}>Stop</Button>}\r\n                <Button onClick={reset}>Reset</Button>\r\n                <Button onClick={wait}>Wait</Button>\r\n              </ButtonGroup>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}